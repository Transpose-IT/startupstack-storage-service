# Configuration file
# key = value
#quarkus.http.port=8080
quarkus.http.cors=true
quarkus.log.level=INFO
quarkus.ssl.native=true

quarkus.oidc.auth-server-url=${KEYCLOAK_URL}
quarkus.oidc.client-id=${KEYCLOAK_CLIENT_ID}
quarkus.oidc.credentials.secret=${KEYCLOAK_CLIENT_SECRET}

startupstack.storageservice.keycloak.url=${KEYCLOAK_URL}
startupstack.storageservice.azure.identity.client_id = ${AZURE_CLIENT_ID}
startupstack.storageservice.azure.identity.client_secret = ${AZURE_CLIENT_SECRET}
startupstack.storageservice.azure.identity.tenant_id = ${AZURE_TENANT_ID}
startupstack.storageservice.azure.storageaccount.endpoint = ${AZURE_STORAGE_ACCOUNT_ENDPOINT}


# Profile specifics

quarkus.log.category."org.hibernate".level=DEBUG

%dev.quarkus.container-image.push=false
%staging.quarkus.container-image.push=true

# Container parameters. Set
quarkus.container-image.group=startupstack
quarkus.container-image.tag=latest
quarkus.container-image.registry=192.168.178.200:5050
quarkus.container-image.insecure=true
quarkus.jib.base-jvm-image=adoptopenjdk/openjdk11:jdk-11.0.6_10-ubi-minimal
kubernetes.image-pull-policy=Always

# Ingress configuration. Use .test as a TLD to avoid HSTS clashes
kubernetes.host=storage-service.test
quarkus.kubernetes.expose=true

# Env variables used to generate the kubernetes manifests with. Must match with the values
# the application will eventually use (usually env vars)
quarkus.kubernetes.env-vars.keycloak-url.value=${KEYCLOAK_URL}
quarkus.kubernetes.env-vars.keycloak-client-id.value=${KEYCLOAK_CLIENT_ID}
quarkus.kubernetes.env-vars.keycloak-client-secret.value=${KEYCLOAK_CLIENT_SECRET}
quarkus.kubernetes.env-vars.azure-client-id.value=${AZURE_CLIENT_ID}
quarkus.kubernetes.env-vars.azure-tenant-id.value=${AZURE_TENANT_ID}
quarkus.kubernetes.env-vars.azure-client-secret.value=${AZURE_CLIENT_SECRET}
quarkus.kubernetes.env-vars.azure-storage-account-endpoint.value=${AZURE_STORAGE_ACCOUNT_ENDPOINT}